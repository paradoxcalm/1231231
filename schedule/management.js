import { fetchDataAndUpdateCalendar } from './calendar.js';
import { showMassManageMessage } from './utils.js';

let fetchScheduleDataCallback = null;

export function registerManagementCallbacks({ fetchScheduleData } = {}) {
    fetchScheduleDataCallback = typeof fetchScheduleData === 'function' ? fetchScheduleData : null;
}

export function openScheduleManagementModal() {
    const modal = document.getElementById('scheduleManagementModal');
    if (!modal) return;
    modal.style.display = 'block';
    loadManagementSchedules();
}

export function closeScheduleManagementModal() {
    const modal = document.getElementById('scheduleManagementModal');
    if (modal) {
        modal.style.display = 'none';
    }
}

export function loadManagementSchedules() {
    const block = document.getElementById('managementScheduleList');
    if (!block) return;

    block.innerHTML = `
      <div class="filters-row">
        <label>–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å
          <select id="mgmtFilterMarketplace">
            <option value="">–í—Å–µ</option>
          </select>
        </label>
        <label>–ì–æ—Ä–æ–¥
          <select id="mgmtFilterCity">
            <option value="">–í—Å–µ</option>
          </select>
        </label>
        <label>–°–∫–ª–∞–¥
          <select id="mgmtFilterWarehouse">
            <option value="">–í—Å–µ</option>
          </select>
        </label>
        <button id="mgmtFilterApplyBtn" class="primary-button">–ü—Ä–∏–º–µ–Ω–∏—Ç—å</button>
      </div>
      <div style="margin-top:10px;">
            <label for="mgmtFilterDate">–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞: </label>
            <input type="date" id="mgmtFilterDate">
            <label style="margin-left:10px;">
                <input type="checkbox" id="mgmtFilterNoOrders">
                –ë–µ–∑ –∑–∞—è–≤–æ–∫
            </label>
        </div>
      <div class="mass-actions">
        <label><input type="checkbox" id="selectAllSchedules"> –í—ã–±—Ä–∞—Ç—å –≤—Å–µ</label>
        <button id="btnMassDelete">–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ</button>
        <button id="btnMassArchive">–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ</button>
        <div id="massManageMessages"></div>
      </div>
      <div id="mgmtSchedulesTable"></div>
    `;

    const mpSelect = document.getElementById('mgmtFilterMarketplace');
    const citySelect = document.getElementById('mgmtFilterCity');
    const whSelect = document.getElementById('mgmtFilterWarehouse');

    fetch('filter_options.php?action=marketplaces')
      .then(r => r.json())
      .then(data => {
        if (!Array.isArray(data.marketplaces)) return;
        mpSelect.innerHTML = `<option value="">–í—Å–µ</option>` +
          data.marketplaces.map(mp => `<option value="${mp}">${mp}</option>`).join('');
      });

    function loadCities(mp) {
      if (mp) {
        fetch(`filter_options.php?action=cities&marketplace=${encodeURIComponent(mp)}`)
          .then(r => r.json())
          .then(data => {
            const cities = data.cities || [];
            citySelect.innerHTML = `<option value="">–í—Å–µ</option>` +
              cities.map(c => `<option value="${c}">${c}</option>`).join('');
            whSelect.innerHTML = `<option value="">–í—Å–µ</option>`;
          });
      } else {
        fetch('filter_options.php?action=all_cities')
          .then(r => r.json())
          .then(data => {
            const cities = data.cities || [];
            citySelect.innerHTML = `<option value="">–í—Å–µ</option>` +
              cities.map(c => `<option value="${c}">${c}</option>`).join('');
            whSelect.innerHTML = `<option value="">–í—Å–µ</option>`;
          });
      }
    }

    function loadWarehouses(mp, city) {
      let url = 'filter_options.php?action=all_warehouses';
      if (mp) url = `filter_options.php?action=warehouses&marketplace=${encodeURIComponent(mp)}`;
      if (city) url += `${url.includes('?') ? '&' : '?'}city=${encodeURIComponent(city)}`;
      fetch(url)
        .then(r => r.json())
        .then(data => {
          const warehouses = data.warehouses || [];
          whSelect.innerHTML = `<option value="">–í—Å–µ</option>` +
            warehouses.map(w => `<option value="${w}">${w}</option>`).join('');
        });
    }

    mpSelect.onchange = () => {
      const mp = mpSelect.value;
      loadCities(mp);
      whSelect.innerHTML = `<option value="">–í—Å–µ</option>`;
    };

    citySelect.onchange = () => {
      const mp = mpSelect.value;
      const ct = citySelect.value;
      loadWarehouses(mp, ct);
    };

    loadCities('');
    document.getElementById('mgmtFilterApplyBtn').onclick = reloadManagementSchedules;

    document.getElementById('btnMassDelete').onclick = () => massManageSchedules('delete');
    document.getElementById('btnMassArchive').onclick = () => massManageSchedules('archive');
    document.getElementById('selectAllSchedules').onchange = (e) => {
      const checked = e.target.checked;
      document.querySelectorAll('.schedule-checkbox').forEach(cb => { cb.checked = checked; });
    };

    reloadManagementSchedules();
}

function reloadManagementSchedules() {
    const mp   = document.getElementById('mgmtFilterMarketplace')?.value || '';
    const ct   = document.getElementById('mgmtFilterCity')?.value || '';
    const wh   = document.getElementById('mgmtFilterWarehouse')?.value || '';
    const date = document.getElementById('mgmtFilterDate')?.value || '';
    const noOrders = document.getElementById('mgmtFilterNoOrders')?.checked;

    let url = 'schedule.php?archived=0';
    if (mp)   url += '&marketplace=' + encodeURIComponent(mp);
    if (ct)   url += '&city=' + encodeURIComponent(ct);
    if (wh)   url += '&warehouse=' + encodeURIComponent(wh);
    if (date) url += '&date=' + encodeURIComponent(date);
    if (noOrders) url += '&no_orders=1';

    const tableBlock = document.getElementById('mgmtSchedulesTable');
    if (!tableBlock) return;
    tableBlock.innerHTML = '–ó–∞–≥—Ä—É–∑–∫–∞‚Ä¶';

    fetch(url)
      .then(r => r.json())
      .then(data => {
        if (!Array.isArray(data)) {
            tableBlock.innerHTML = '<p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π</p>';
            return;
        }

        data.sort((a, b) => {
            const dA = new Date(a.accept_deadline || a.acceptance_end || a.accept_date || 0);
            const dB = new Date(b.accept_deadline || b.acceptance_end || b.accept_date || 0);
            return dA - dB;
        });

        let html = `
            <table class="management-table">
              <thead>
                <tr>
                  <th><input type="checkbox" id="selectAllSchedules"></th>
                  <th>‚Ññ</th>
                  <th>–û—Ç–∫—É–¥–∞ ‚Üí –ö—É–¥–∞</th>
                  <th>–ü—Ä–∏—ë–º–∫–∞</th>
                  <th>–°–¥–∞—á–∞</th>
                  <th>–ó–∞—è–≤–æ–∫</th>
                  <th>–°—Ç–∞—Ç—É—Å</th>
                  <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                </tr>
              </thead>
              <tbody>
        `;

        data.forEach(s => {
            const ordersCount = typeof s.orders_count !== 'undefined' ? s.orders_count : 0;

            let rowClass = '';
            if (s.status === '–ó–∞–≤–µ—Ä—à–µ–Ω–æ' || s.status === '–¢–æ–≤–∞—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω') {
                rowClass = 'finished';
            } else if (
                s.status === '–í –ø—É—Ç–∏' ||
                s.status === '–ì–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ' ||
                s.status === '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ'
            ) {
                rowClass = 'blocked';
            }

            html += `
                <tr id="schedule_item_${s.id}" class="${rowClass}">
                  <td><input type="checkbox" class="schedule-checkbox" value="${s.id}"></td>
                  <td>${s.id}</td>
                  <td>${s.city} ‚Üí ${s.warehouses || '‚Äî'}</td>
                  <td>${s.accept_date}${s.accept_time ? ' ' + s.accept_time : ''}</td>
                  <td>${s.delivery_date || ''}</td>
                  <td class="orders-col">${ordersCount}</td>
                  <td>
                    <select onchange="updateStatus(${s.id}, this.value)">
                      <option value="–û–∂–∏–¥–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏" ${s.status==='–û–∂–∏–¥–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏' ? 'selected' : ''}>–û–∂–∏–¥–∞–µ—Ç</option>
                      <option value="–ì–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ" ${s.status==='–ì–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ' ? 'selected' : ''}>–ì–æ—Ç–æ–≤</option>
                      <option value="–í –ø—É—Ç–∏" ${s.status==='–í –ø—É—Ç–∏' ? 'selected' : ''}>–í –ø—É—Ç–∏</option>
                      <option value="–ó–∞–≤–µ—Ä—à–µ–Ω–æ" ${s.status==='–ó–∞–≤–µ—Ä—à–µ–Ω–æ' ? 'selected' : ''}>–ó–∞–≤–µ—Ä—à–µ–Ω–æ</option>
                    </select>
                  </td>
                  <td>
                    <button class="action-button btn-move" data-id="${s.id}" ${ordersCount ? '' : 'disabled'} title="–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤—Å–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –¥—Ä—É–≥–æ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ">üîÑ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏</button>
                    <button class="action-button delete-btn" onclick="deleteSchedule(${s.id})">–£–¥–∞–ª–∏—Ç—å</button>
                    <button class="action-button archive-btn" onclick="archiveSchedule(${s.id})">–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å</button>
                  </td>
                </tr>
            `;
        });

        html += `
              </tbody>
            </table>
        `;

        tableBlock.innerHTML = html;

        const selectAll = document.getElementById('selectAllSchedules');
        if (selectAll) {
            selectAll.addEventListener('change', () => {
                const checked = selectAll.checked;
                document.querySelectorAll('.schedule-checkbox').forEach(cb => { cb.checked = checked; });
            });
        }

        document.querySelectorAll('.btn-move').forEach(btn => {
            btn.addEventListener('click', async () => {
                if (btn.disabled) return;
                const fromId = btn.dataset.id;
                const toId = prompt('–í–≤–µ–¥–∏—Ç–µ ID —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞—è–≤–∫–∏:');
                if (!toId) return;
                if (String(toId).trim() === '' || Number(toId) === Number(fromId)) return;
                if (!confirm(`–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤—Å–µ –∑–∞—è–≤–∫–∏ —Å #${fromId} –Ω–∞ #${toId}?`)) return;

                btn.disabled = true;
                try {
                    const res = await fetch('move_orders.php', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json; charset=UTF-8' },
                        body: JSON.stringify({ from_id: Number(fromId), to_id: Number(toId) })
                    });
                    const resp = await res.json();
                    if (resp && resp.success) {
                        alert(resp.message || '–ó–∞—è–≤–∫–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã');
                        reloadManagementSchedules();
                    } else {
                        alert('–û—à–∏–±–∫–∞: ' + (resp?.message || '–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞—è–≤–∫–∏'));
                    }
                } catch (e) {
                    console.error(e);
                    alert('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ –∑–∞—è–≤–æ–∫');
                } finally {
                    btn.disabled = false;
                }
            });
        });
    })
    .catch(err => {
        tableBlock.innerHTML = '<p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π</p>';
        console.error('–û—à–∏–±–∫–∞ reloadManagementSchedules:', err);
    });
}

export function updateStatus(id, status) {
    const realUserRole = typeof userRole !== 'undefined' ? userRole : 'client';
    const localCanUpdate = (realUserRole === 'admin' || realUserRole === 'manager');

    if (!localCanUpdate) {
        alert('–ù–µ—Ç –ø—Ä–∞–≤!');
        return;
    }

    fetch('schedule.php', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ action: 'update_status', id, status })
    })
    .then(r => r.json())
    .then(d => {
        if (d.status === 'success') {
            if (fetchScheduleDataCallback) {
                fetchScheduleDataCallback();
            }
            fetchDataAndUpdateCalendar();
        } else {
            alert('–û—à–∏–±–∫–∞: ' + d.message);
        }
    })
    .catch(err => console.error('–û—à–∏–±–∫–∞ updateStatus:', err));
}

export function massManageSchedules(action) {
    const checkboxes = Array.from(document.querySelectorAll('.schedule-checkbox:checked'));
    if (checkboxes.length === 0) {
        alert('–ù–µ –≤—ã–±—Ä–∞–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π.');
        return;
    }

    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π?')) {
        return;
    }

    const ids = checkboxes.map(cb => parseInt(cb.value, 10));
    const payload = { action, schedule_ids: ids };

    const btnDelete  = document.getElementById('btnMassDelete');
    const btnArchive = document.getElementById('btnMassArchive');
    const msgBox     = document.getElementById('massManageMessages');

    btnDelete.disabled = btnArchive.disabled = true;
    if (msgBox) {
        msgBox.innerHTML = '';
    }

    fetch('mass_update_schedule.php', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
    })
    .then(response => {
        if (!response.ok) {
            throw new Error(`–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª ${response.status}: ${response.statusText}`);
        }
        return response.json();
    })
    .then(data => {
        if (!data.success) {
            showMassManageMessage('error', `–û—à–∏–±–∫–∞: ${data.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
            return;
        }

        const results = data.results || {};
        const blocked = [];

        ids.forEach(id => {
            const result = results[id];
            const row    = document.getElementById('schedule_item_' + id);
            if (!result || !row) return;

            if (result.status === 'deleted' || result.status === 'archived') {
                row.style.opacity = '0.4';
                row.style.textDecoration = 'line-through';
            } else if (result.status === 'blocked') {
                row.style.backgroundColor = '#ffe6e6';
                blocked.push(`–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ #${id}: ${result.message}`);
            }
        });

        if (blocked.length) {
            showMassManageMessage('warning',
                '–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã:<ul>'
                + blocked.map(msg => `<li>${msg}</li>`).join('')
                + '</ul>'
            );
        } else {
            showMassManageMessage('success', '–í—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã');
        }

        loadManagementSchedules();
        fetchDataAndUpdateCalendar();
    })
    .catch(err => {
        showMassManageMessage('error', `–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${err.message}`);
    })
    .finally(() => {
        btnDelete.disabled = btnArchive.disabled = false;
    });
}
