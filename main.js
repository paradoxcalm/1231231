// üìÑ main.js
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∞ ¬´–ü—Ä–∏—ë–º–∫–∞¬ª
function loadForm() {
    const dynamicContent = document.getElementById('dynamicContent');
    if (!dynamicContent) return;

    dynamicContent.style.display = 'block';

    // –†–∞–∑–º–µ—Ç–∫–∞ –≤–∫–ª–∞–¥–æ–∫ –∏ –¥–≤—É—Ö —Å–µ–∫—Ü–∏–π
    dynamicContent.innerHTML = `
      <div class="section-container" style="padding-top: 20px;">
        <div class="tabs">
          <button class="tab-button active" onclick="switchReceptionTab('scanSection')">QR¬†–ü—Ä–∏—ë–º–∫–∞</button>
          <button class="tab-button" onclick="switchReceptionTab('formSection'); loadOldReception()">–ü—Ä–∏—ë–º–∫–∞</button>
        </div>
        <!-- –°–µ–∫—Ü–∏—è QR‚Äë–ø—Ä–∏—ë–º–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∏–¥–∏–º–∞) -->
        <div id="scanSection">
          <h2>–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR‚Äë–∫–æ–¥–∞</h2>
          <button class="icon-button" onclick="startScanner()">üöÄ¬†–ó–∞–ø—É—Å—Ç–∏—Ç—å¬†—Å–∫–∞–Ω–µ—Ä</button>
          <button class="icon-button" onclick="stopScanner()">‚õî¬†–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å¬†—Å–∫–∞–Ω–µ—Ä</button>
          <div id="reader" style="width: 100%; max-width: 400px; margin: auto; padding-top: 20px;"></div>
        </div>
        <!-- –°–µ–∫—Ü–∏—è —Ä—É—á–Ω–æ–π –ø—Ä–∏—ë–º–∫–∏ (–ø–æ–∫–∞ –ø—É—Å—Ç–∞—è, –≤–∏–¥–∏–º–æ—Å—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∞) -->
        <div id="formSection" style="display: none;">
          <!-- –°—é–¥–∞ –ø–æ–∑–∂–µ –±—É–¥–µ—Ç –≤—Å—Ç–∞–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è —Ñ–æ—Ä–º–∞ –∏–∑ –ø–∞–ø–∫–∏ OLDWORL -->
          <div id="manualReceptionContainer"></div>
        </div>
      </div>
    `;
}


// üîò –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ —Å–∫–∞–Ω–µ—Ä–∞
function startScanner() {
    if (typeof initScanner === 'function') {
        initScanner();
    } else {
        console.error("‚ùå initScanner() –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –ø—Ä–æ–≤–µ—Ä—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ scan.js");
    }
}

// ‚õî –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–∞–Ω–µ—Ä–∞
function stopScanner() {
    if (typeof stopScan === 'function') {
        stopScan();
        console.log("‚õî –°–∫–∞–Ω–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é");
    } else {
        console.error("‚ùå stopScan() –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –ø—Ä–æ–≤–µ—Ä—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ scan.js");
    }
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –≤–∫–ª–∞–¥–∫–∞–º–∏ "–§–æ—Ä–º–∞ / –°–∫–∞–Ω"
function switchReceptionTab(tabId) {
    const sections = ['formSection', 'scanSection'];
    sections.forEach(id => {
        const tab = document.getElementById(id);
        const btn = document.querySelector(`.tab-button[onclick*="${id}"]`);
        if (tab) tab.style.display = (id === tabId) ? 'block' : 'none';
        if (btn) btn.classList.toggle('active', id === tabId);
    });

    if (tabId === 'formSection') {
        console.log("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ –ü—Ä–∏—ë–º–∫—É");
    } else if (tabId === 'scanSection') {
        if (typeof initScanner === 'function') {
            initScanner();
        } else {
            console.error("‚ùå initScanner() –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –ø—Ä–æ–≤–µ—Ä—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ scan.js");
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∞ "–¢–∞–±–ª–∏—Ü–∞"
function loadTable() {
    const dynamicContent = document.getElementById('dynamicContent');
    if (!dynamicContent) return;
    dynamicContent.style.display = 'block';
    dynamicContent.innerHTML = `
        <h2>–¢–∞–±–ª–∏—Ü–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–π</h2>
        <div id="tableContainer"></div>
        <div id="paginationContainer"></div>
        <button class="icon-button" onclick="exportAllDataToExcel()" style="margin-top: 10px;">
            <i class="fas fa-download"></i> –í—ã–≥—Ä—É–∑–∏—Ç—å –≤ Excel
        </button>
    `;
    fetchDataAndDisplayTable();
}
// –í—ã–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã –≤ Excel
function exportAllDataToExcel() {
    fetch('/admin/api/export_to_excel.php')
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.blob();
        })
        .then(blob => {
            const url = URL.createObjectURL(blob);
            const link = document.createElement('a');
            link.href = url;
            link.download = 'exported_data.xls';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            URL.revokeObjectURL(url);
        })
        .catch(error => {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö:', error);
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∞ "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
function loadChart() {
    const scheduleSection = document.getElementById('scheduleSection');
    if (!scheduleSection) return;

    document.getElementById('dynamicContent').style.display = 'none';
    const tableSection = document.getElementById('tableSection');
    if (tableSection) tableSection.style.display = 'none';

    scheduleSection.style.display = 'block';

    const scheduleContainer = document.getElementById('scheduleContainer');
    scheduleContainer.innerHTML = '';

    const tableContainer = document.createElement('div');
    tableContainer.id = 'scheduleTable';
    tableContainer.classList.add('schedule-container');
    tableContainer.innerHTML = generateScheduleTable();

    scheduleContainer.appendChild(tableContainer);
}

function generateScheduleTable(weekOffset = 0) {
    const today = new Date();
    today.setDate(today.getDate() + weekOffset * 7);
    const firstDayOfWeek = new Date(today);
    firstDayOfWeek.setDate(today.getDate() - today.getDay() + 1);
    const monthNames = ["—è–Ω–≤", "—Ñ–µ–≤", "–º–∞—Ä", "–∞–ø—Ä", "–º–∞–π", "–∏—é–Ω", "–∏—é–ª", "–∞–≤–≥", "—Å–µ–Ω", "–æ–∫—Ç", "–Ω–æ—è", "–¥–µ–∫"];
    let tableHTML = `<h2 class="schedule-title">–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–æ–∫</h2>`;
    tableHTML += `<table class="schedule-table"><thead><tr>`;
    for (let i = 0; i < 7; i++) {
        const currentDate = new Date(firstDayOfWeek);
        currentDate.setDate(firstDayOfWeek.getDate() + i);
        const dayNames = ['–ü–ù', '–í–¢', '–°–†', '–ß–¢', '–ü–¢', '–°–ë', '–í–°'];
        const dayName = dayNames[i];
        const day = currentDate.getDate();
        const month = monthNames[currentDate.getMonth()];
        tableHTML += `<th>${dayName} <br> ${day} ${month}</th>`;
    }
    tableHTML += `</tr></thead><tbody><tr>`;
    for (let i = 0; i < 7; i++) {
        tableHTML += `<td class="schedule-cell"></td>`;
    }
    tableHTML += `</tr></tbody></table>`;
    tableHTML += `
        <div class="schedule-controls">
            <button onclick="changeWeek(-1)">‚Üê –ü—Ä–µ–¥—ã–¥—É—â–∞—è –Ω–µ–¥–µ–ª—è</button>
            <button onclick="changeWeek(1)">–°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è ‚Üí</button>
        </div>
    `;
    return tableHTML;
}

let currentWeekOffset = 0;
function changeWeek(offset) {
    currentWeekOffset += offset;
    const scheduleTable = document.getElementById('scheduleTable');
    if (scheduleTable) {
        scheduleTable.innerHTML = generateScheduleTable(currentWeekOffset);
    }
}

function toggleMobileProfileMenu() {
  const menu = document.getElementById("mobileProfileMenu");
  if (!menu) return;
  menu.classList.toggle("visible");
  menu.classList.toggle("hidden");
}
/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç–∞—Ä—É—é —Ñ–æ—Ä–º—É –ø—Ä–∏—ë–º–∫–∏ –≤–æ –≤—Ç–æ—Ä—É—é –≤–∫–ª–∞–¥–∫—É.
 * –§–æ—Ä–º–∞ –±–µ—Ä—ë—Ç—Å—è –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ (OLDWORL) –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞ log_data.php.
 * –í—ã–∑–æ–≤ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ ‚Äî –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏ –≤–∫–ª–∞–¥–∫–∏.
 */
function loadOldReception() {
  const container = document.getElementById('manualReceptionContainer');
  if (!container || container.dataset.loaded) return;
  container.dataset.loaded = 'true';

  // –§–æ—Ä–º–∞ —Ä—É—á–Ω–æ–π –ø—Ä–∏—ë–º–∫–∏
  container.innerHTML = `
    <h3>–†—É—á–Ω–∞—è –ø—Ä–∏—ë–º–∫–∞</h3>
    <div id="statusOld"></div>
    <form id="manualReceptionForm" enctype="multipart/form-data">
      <div class="form-group">
        <label for="citySelect">–ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</label>
        <select id="citySelect" name="city" required>
          <option value="">–ó–∞–≥—Ä—É–∑–∫–∞...</option>
        </select>
      </div>
      <div class="form-group">
        <label for="warehouseSelect">–°–∫–ª–∞–¥ (–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ):</label>
        <select id="warehouseSelect" name="warehouses" disabled required>
          <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ —Å–Ω–∞—á–∞–ª–∞</option>
        </select>
      </div>
      <div class="form-group" id="dateGroup" style="display:none;">
        <label for="dateSelect">–î–∞—Ç–∞ —Å–¥–∞—á–∏:</label>
        <select id="dateSelect" name="date"></select>
      </div>

      <!-- –°–∫—Ä—ã—Ç—ã–µ –ø–æ–ª—è -->
      <input type="hidden" id="scheduleId" name="schedule_id">
      <input type="hidden" id="directionInput" name="direction">
      <input type="hidden" id="dateOfDeliveryInput" name="date_of_delivery">

      <div class="form-group">
        <label for="ipInput">–ò–ü:</label>
        <input type="text" id="ipInput" name="ip" required>
      </div>
      <div class="form-group">
        <label for="commentInput">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</label>
        <textarea id="commentInput" name="comment" rows="3"></textarea>
      </div>

      <div class="form-group">
        <label for="senderPhone">–¢–µ–ª–µ—Ñ–æ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:</label>
        <input type="tel" id="senderPhone" name="sender" pattern="[0-9]{10,15}" required>
      </div>

      <div class="form-group">
        <label for="shipmentType">–¢–∏–ø –æ—Ç–ø—Ä–∞–≤–∫–∏:</label>
        <select id="shipmentType" name="packaging_type" required>
          <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø</option>
          <option value="Box">–ö–æ—Ä–æ–±–∞</option>
          <option value="Pallet">–ü–∞–ª–ª–µ—Ç—ã</option>
        </select>
      </div>

      <div class="form-group">
        <label for="boxes">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç/–ø–∞–ª–ª–µ—Ç:</label>
        <input type="number" id="boxes" name="boxes" min="1" required>
      </div>

      <div class="form-group">
        <label for="paymentAmount">–°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã (‚ÇΩ):</label>
        <input type="number" id="paymentAmount" name="payment"
               step="0.01" min="0" inputmode="decimal" required>
      </div>

      <div class="form-group">
        <label for="paymentType">–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</label>
        <select id="paymentType" name="payment_type" required>
          <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</option>
          <option value="–ù–∞–ª–∏—á–Ω—ã–µ">–ù–∞–ª–∏—á–Ω—ã–µ</option>
          <option value="–¢–ë–∞–Ω–∫">–¢-–ë–∞–Ω–∫</option>
          <option value="–î–æ–ª–≥">–î–æ–ª–≥</option>
        </select>
      </div>

      <div class="form-group" id="qrImage" style="display:none;">
        <img id="qrPreview" alt="QR code preview">
      </div>

      <!-- –§–æ—Ç–æ: –≥–∞–ª–µ—Ä–µ—è + –∫–∞–º–µ—Ä–∞ (–æ–±–∞ –∫–∞–∫ photos[]) -->
      <div class="form-group">
        <label>–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:</label>
        <div style="display:flex; gap:8px; flex-wrap:wrap;">
          <button type="button" id="btnPickGallery">üìÅ –í—ã–±—Ä–∞—Ç—å –∏–∑ –≥–∞–ª–µ—Ä–µ–∏</button>
          <button type="button" id="btnTakePhoto">üì∑ –°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ</button>
          <span id="photoHint" style="opacity:.7;">(–º–æ–∂–Ω–æ –∏ –≤—ã–±—Ä–∞—Ç—å, –∏ —Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞—Ç—å)</span>
        </div>
        <input type="file" id="fileGallery" name="photos[]" accept="image/*" multiple style="display:none">
        <input type="file" id="fileCamera"  name="photos[]" accept="image/*" capture="environment" style="display:none">
        <div id="photoCounter" style="margin-top:6px; font-size:.9em; opacity:.8;"></div>
      </div>

      <button type="submit">–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É</button>
    </form>
  `;

  // --- –¢–∞—Ä–∏—Ñ—ã ---
  let tariffsData = {};
  fetch('/admin/api/tariffs/fetch_tariffs.php')
    .then(res => res.json())
    .then(data => { if (data.success) tariffsData = data.data || {}; })
    .catch(err => console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞—Ä–∏—Ñ–æ–≤:', err));

  // --- –ì–æ—Ä–æ–¥–∞ ---
  fetch('filter_options.php?action=all_cities')
    .then(res => res.json())
    .then(data => {
      const citySelect = document.getElementById('citySelect');
      const cities = Array.isArray(data) ? data : (data && data.cities ? data.cities : []);
      citySelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥</option>';
      cities.forEach(city => {
        const opt = document.createElement('option');
        opt.value = city;
        opt.textContent = city;
        citySelect.appendChild(opt);
      });
    })
    .catch(err => {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–æ—Ä–æ–¥–æ–≤:', err);
      document.getElementById('citySelect').innerHTML = '<option value="">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</option>';
    });

  // --- –†—É—á–Ω–æ–π –≤–≤–æ–¥ —Å—É–º–º—ã ---
  const sumField = document.getElementById('paymentAmount');
  sumField.addEventListener('input', () => {
    if (sumField.value === '') delete sumField.dataset.manual;
    else sumField.dataset.manual = '1';
  });

  // --- –§–æ—Ç–æ ---
  const fileGallery = document.getElementById('fileGallery');
  const fileCamera  = document.getElementById('fileCamera');
  const btnPickGallery = document.getElementById('btnPickGallery');
  const btnTakePhoto   = document.getElementById('btnTakePhoto');
  const photoCounter   = document.getElementById('photoCounter');

  btnPickGallery.addEventListener('click', () => fileGallery.click());
  btnTakePhoto.addEventListener('click',   () => fileCamera.click());

  function updatePhotoCounter() {
    const count = (fileGallery.files?.length || 0) + (fileCamera.files?.length || 0);
    photoCounter.textContent = count ? `–í—ã–±—Ä–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${count}` : '';
  }
  fileGallery.addEventListener('change', updatePhotoCounter);
  fileCamera.addEventListener('change',  updatePhotoCounter);

  // --- –ö—ç—à —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π ---
  let schedulesCache = [];

  // –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞
  document.getElementById('citySelect').addEventListener('change', function () {
    const city = this.value;
    const warehouseSelect = document.getElementById('warehouseSelect');
    const dateSelect = document.getElementById('dateSelect');
    const dateGroup = document.getElementById('dateGroup');

    warehouseSelect.innerHTML = '';
    dateSelect.innerHTML = '';
    document.getElementById('scheduleId').value = '';
    document.getElementById('directionInput').value = '';
    document.getElementById('dateOfDeliveryInput').value = '';

    sumField.value = '';
    delete sumField.dataset.manual;

    if (!city) {
      warehouseSelect.disabled = true;
      dateGroup.style.display = 'none';
      return;
    }

    fetch('schedule.php?archived=0&city=' + encodeURIComponent(city))
      .then(res => res.json())
      .then(data => {
        const schedules = Array.isArray(data) ? data : [];
        const today = new Date(); today.setHours(0,0,0,0);

        schedulesCache = schedules.filter(s => {
          const d = new Date(s.accept_date); d.setHours(0,0,0,0);
          return d >= today;
        });

        if (schedulesCache.length === 0) {
          warehouseSelect.innerHTML = '<option value="">–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤</option>';
          warehouseSelect.disabled = true;
          dateGroup.style.display = 'none';
          return;
        }

        const warehouses = [...new Set(schedulesCache.map(s => s.warehouses))];
        warehouseSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥</option>';
        warehouses.forEach(w => {
          const opt = document.createElement('option');
          opt.value = w;
          opt.textContent = w;
          warehouseSelect.appendChild(opt);
        });
        warehouseSelect.disabled = false;
        dateGroup.style.display = 'none';
      })
      .catch(err => {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:', err);
        warehouseSelect.innerHTML = '<option value="">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</option>';
        warehouseSelect.disabled = true;
        dateGroup.style.display = 'none';
      });
  });

  // –í—ã–±–æ—Ä —Å–∫–ª–∞–¥–∞
  document.getElementById('warehouseSelect').addEventListener('change', function () {
    const city = document.getElementById('citySelect').value;
    const warehouse = this.value;
    const dateSelect = document.getElementById('dateSelect');
    const dateGroup = document.getElementById('dateGroup');

    document.getElementById('scheduleId').value = '';
    document.getElementById('directionInput').value = warehouse;
    document.getElementById('dateOfDeliveryInput').value = '';

    sumField.value = '';
    delete sumField.dataset.manual;

    if (!warehouse) {
      dateGroup.style.display = 'none';
      updateCost();
      return;
    }

    const today = new Date(); today.setHours(0,0,0,0);
    const filtered = schedulesCache.filter(
      s => s.city === city && s.warehouses === warehouse && new Date(s.accept_date) >= today
    );

    if (!filtered || filtered.length === 0) {
      dateGroup.style.display = 'none';
      updateCost();
      return;
    }

    const dates = [...new Set(filtered.map(s => s.accept_date))];
    if (dates.length <= 1) {
      dateGroup.style.display = 'none';
      document.getElementById('scheduleId').value = filtered[0].id;
      document.getElementById('dateOfDeliveryInput').value = filtered[0].accept_date;
      updateCost();
    } else {
      dateGroup.style.display = 'block';
      dateSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É</option>';
      dates.forEach(d => {
        const opt = document.createElement('option');
        opt.value = d;
        opt.textContent = d;
        dateSelect.appendChild(opt);
      });
      updateCost();
    }
  });

  // –í—ã–±–æ—Ä –¥–∞—Ç—ã
  document.getElementById('dateSelect').addEventListener('change', function () {
    const city      = document.getElementById('citySelect').value;
    const warehouse = document.getElementById('warehouseSelect').value;
    const date      = this.value;
    const schedule = schedulesCache.find(s =>
      s.city === city && s.warehouses === warehouse && s.accept_date === date
    );
    document.getElementById('scheduleId').value = schedule ? schedule.id : '';
    document.getElementById('dateOfDeliveryInput').value = date || '';
    updateCost();
  });

  // –ü–æ–∫–∞–∑/—Å–∫—Ä—ã—Ç–∏–µ QR
  document.getElementById('paymentType').addEventListener('change', function () {
    const qrImage = document.getElementById('qrImage');
    const qrPreview = document.getElementById('qrPreview');
    if (this.value === '–¢–ë–∞–Ω–∫') {
      qrImage.style.display = 'block';
      qrPreview.src = './QR/1IP.jpg';
    } else {
      qrImage.style.display = 'none';
      qrPreview.src = '';
    }
  });

  // –†–∞—Å—á—ë—Ç —Å—É–º–º—ã (–Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ä—É—á–Ω–æ–π –≤–≤–æ–¥)
  function updateCost({ force = false } = {}) {
    const city      = document.getElementById('citySelect').value;
    const warehouse = document.getElementById('warehouseSelect').value;
    const type      = document.getElementById('shipmentType').value;
    const qty       = parseInt(document.getElementById('boxes').value, 10) || 0;

    if (!force && sumField.dataset.manual === '1') return;

    let value = '';

    if (tariffsData[city] && tariffsData[city][warehouse] && qty > 0) {
      const prices = tariffsData[city][warehouse];
      const pricePerUnit =
        type === 'Box'    ? prices.box_price   :
        type === 'Pallet' ? prices.pallet_price : null;

      if (pricePerUnit != null) {
        value = (qty * pricePerUnit).toFixed(2);
      }
    }

    sumField.value = value;
    if (value !== '') delete sumField.dataset.manual;
  }

  document.getElementById('shipmentType').addEventListener('change', updateCost);
  document.getElementById('boxes').addEventListener('input', updateCost);

  // –û–¢–ü–†–ê–í–ö–ê –§–û–†–ú–´: —Å–æ–±–∏—Ä–∞–µ–º FormData –í–†–£–ß–ù–£–Æ –∏ —Å–∫–ª–µ–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã
  document.getElementById('manualReceptionForm').addEventListener('submit', async function (e) {
    e.preventDefault();

    const statusEl  = document.getElementById('statusOld');
    const submitBtn = this.querySelector('button[type="submit"]');

    submitBtn.disabled = true;
    submitBtn.style.backgroundColor = '#ccc';
    submitBtn.textContent = '–°–æ–∑–¥–∞–Ω–∏–µ...';

    // –°–æ–±–∏—Ä–∞–µ–º FormData –≤—Ä—É—á–Ω—É—é: –ø–æ–ª—è —Ñ–æ—Ä–º—ã + –æ–±–∞ FileList –≤ –æ–¥–∏–Ω –º–∞—Å—Å–∏–≤.
    const fd = new FormData();

    // –¢–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è
    fd.append('city',               document.getElementById('citySelect').value || '');
    fd.append('warehouses',         document.getElementById('warehouseSelect').value || '');
    fd.append('date',               document.getElementById('dateSelect').value || '');
    fd.append('schedule_id',        document.getElementById('scheduleId').value || '');
    fd.append('direction',          document.getElementById('directionInput').value || '');
    fd.append('date_of_delivery',   document.getElementById('dateOfDeliveryInput').value || '');
    fd.append('sender',             document.getElementById('senderPhone').value || '');
    fd.append('packaging_type',     document.getElementById('shipmentType').value || '');
    fd.append('boxes',              document.getElementById('boxes').value || '');
    fd.append('payment',            document.getElementById('paymentAmount').value || '');
    fd.append('payment_type',       document.getElementById('paymentType').value || '');
    fd.append('ip',                 document.getElementById('ipInput').value || '');
    fd.append('comment',            document.getElementById('commentInput').value || '');

    // –§–∞–π–ª—ã: —Å–∫–ª–µ–∏–≤–∞–µ–º –≥–∞–ª–µ—Ä–µ—é –∏ –∫–∞–º–µ—Ä—É
    const allFiles = [];
    if (fileGallery.files && fileGallery.files.length) {
      for (const f of fileGallery.files) allFiles.push(f);
    }
    if (fileCamera.files && fileCamera.files.length) {
      for (const f of fileCamera.files) allFiles.push(f);
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥ –î–í–£–ú–Ø –∏–º–µ–Ω–∞–º–∏ ‚Äî –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º —Å–µ—Ä–≤–µ—Ä–æ–º:
    // 1) photos[] ‚Äî –∫–∞–∫ –Ω–æ–≤–∞—è –ª–æ–≥–∏–∫–∞
    // 2) photo[]  ‚Äî –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –∂–¥—ë—Ç —Å—Ç–∞—Ä–æ–µ –∏–º—è
    for (const f of allFiles) {
      fd.append('photos[]', f, f.name);
      fd.append('photo[]',  f, f.name);
    }

    try {
      const res = await fetch('log_data.php', { method: 'POST', body: fd });
      const result = await res.json();

      if (result.status === 'success') {
        statusEl.textContent = '‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞';
        statusEl.style.color = 'green';

        window.lastReceptionData = {
          city:         document.getElementById('citySelect').value || '',
          warehouse:    document.getElementById('directionInput').value || '',
          acceptDate:   new Date().toISOString().split('T')[0],
          deliveryDate: document.getElementById('dateOfDeliveryInput').value || '',
          boxCount:     document.getElementById('boxes').value || 1,
          phone:        document.getElementById('senderPhone').value || '',
          company:      ''
        };

        this.reset();
        document.getElementById('warehouseSelect').disabled = true;
        document.getElementById('dateGroup').style.display = 'none';
        delete document.getElementById('paymentAmount').dataset.manual;
        photoCounter.textContent = '';

        submitBtn.disabled = false;
        submitBtn.style.backgroundColor = '';
        submitBtn.textContent = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É';

        let printBtn = document.getElementById('receptionPrintBtn');
        if (!printBtn) {
          printBtn = document.createElement('button');
          printBtn.id = 'receptionPrintBtn';
          printBtn.type = 'button';
          printBtn.textContent = 'üìÑ –°–∫–∞—á–∞—Ç—å –∞–∫—Ç –ø—Ä–∏—ë–º–∫–∏';
          printBtn.style.marginLeft = '10px';
          printBtn.addEventListener('click', () => {
            if (typeof downloadReceptionPdf === 'function') {
              downloadReceptionPdf();
            } else {
              console.error('downloadReceptionPdf –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏ reception_pdf.js.');
            }
          });
          statusEl.after(printBtn);
        }
      } else {
        statusEl.textContent = `–û—à–∏–±–∫–∞: ${result.message}`;
        statusEl.style.color = 'red';
        submitBtn.disabled = false;
        submitBtn.style.backgroundColor = '';
        submitBtn.textContent = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É';
      }
    } catch (err) {
      statusEl.textContent = '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏';
      statusEl.style.color = 'red';
      submitBtn.disabled = false;
      submitBtn.style.backgroundColor = '';
      submitBtn.textContent = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É';
    }
  });
}

 